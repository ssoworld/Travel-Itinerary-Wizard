# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  pull_request:
    branches: [ "master" ]

env:
  Solution_Name: TravelItineraryWizard.sln                    # Replace with your solution name, i.e. MyWpfApp.sln.
  Test_Project_Base: XUnit.Coverlet.Collector                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
  # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
  # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

jobs:

  build:

    strategy:
      matrix:
        config: [Debug, Release]
        dotnet: ['6.0.x', '7.0.x', '8.0.x']

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on


    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet }}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Build the application
      run: dotnet build $env:Solution_Name
      env:
        Configuration: ${{ matrix.config }}

    - name: show output files after build
      run: |
        ls -R

    - name: archive the build output
      uses: actions/upload-artifact@v4
      with:
        name: build_output_${{ matrix.config }}_${{ matrix.dotnet }}
        path: ./src/bin/${{ matrix.config }}/

  test:
    needs: build
    strategy:
      matrix:
        config: [Debug, Release]
        dotnet: ['6.0.x', '7.0.x', '8.0.x']

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # env:
    #   Solution_Name: TravelItineraryWizard.sln                    # Replace with your solution name, i.e. MyWpfApp.sln.
    #   Test_Project_Base: XUnit.Coverlet.Collector                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
    #   # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
    #   # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet }}

    - name: Unarchive the build output
      uses: actions/download-artifact@v4
      with:
        name: build_output_${{ matrix.config }}_${{ matrix.dotnet }}
        path: ./

    - name: show output files before test
      run: |
        ls -R

    # Execute all unit tests in the solution, collecting code coverage
    - name: Execute unit tests
      run: dotnet test $env:Solution_Name --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Copy Coverage To Predictable Location
      run: cp coverage/**/coverage.cobertura.xml coverage.cobertura.xml

    - name: Generate HTML Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
      with:
         reports: coverage.cobertura.xml
         targetdir: coveragereport
    
    - name: Archive HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage_html_report_${{ matrix.config }}_${{ matrix.dotnet }}
        path: ./coveragereport/

    - name: show output files after test
      run: |
        ls -R

    - name: archive coverage file
      uses: actions/upload-artifact@v4
      with:
        name: coverage_report_${{ matrix.config }}_${{ matrix.dotnet }}
        path: ./coverage.cobertura.xml
 
  coverage-report-md:
    needs: test
    permissions:
      pull-requests: write
    strategy:
      matrix:
        config: [Debug, Release]
        dotnet: [ '6.0.x', '7.0.x', '8.0.x']

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # env:
    #   Solution_Name: TravelItineraryWizard.sln                    # Replace with your solution name, i.e. MyWpfApp.sln.
    #   Test_Project_Base: XUnit.Coverlet.Collector                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
    #   Code_Cov_Report_File: code-coverage-results                 # standard name for the output of Code Coverage report
    #   # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
    #   # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: checkout the repo
      uses: actions/checkout@v4

    - name: Unarchive the workspace
      uses: actions/download-artifact@v4
      with:
        name: coverage_report_${{ matrix.config }}_${{ matrix.dotnet }}
        path: ./

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: show output files after report generation
      run: |
        ls -R

    - name: rename file for the build
      run: |
        mv code-coverage-results.md code-coverage-results_${{ matrix.config }}_${{ matrix.dotnet }}.md
        rm -f code-coverage-results.md

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        header: Code Coverage ${{ matrix.config }}_${{ matrix.dotnet }}
        recreate: true
        message: Coverage results for ${{ matrix.config }}, ${{ matrix.dotnet }}
        path: code-coverage-results_${{ matrix.config }}_${{ matrix.dotnet }}.md

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.config }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
   #  - name: Decode the pfx
   #    run: |
   #      $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
   #      $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
   #      [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
   #  - name: Create the app package
   #    run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
   #    env:
   #      Appx_Bundle: Always
   #      Appx_Bundle_Platforms: x86|x64
   #      Appx_Package_Build_Mode: StoreUpload
   #      Configuration: ${{ matrix.config }}

    # Remove the pfx
   #  - name: Remove the pfx
   #    run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
   #  - name: Upload build artifacts
   #    uses: actions/upload-artifact@v4
   #    with:
   #      name: MSIX Package
   #      path: ${{ env.Wap_Project_Directory }}/AppPackages/
